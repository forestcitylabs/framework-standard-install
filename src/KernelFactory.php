<?php

namespace Application;

use DI\ContainerBuilder;
use ForestCityLabs\Framework\Kernel;
use ForestCityLabs\Framework\Middleware\AllowedHostMiddleware;
use ForestCityLabs\Framework\Middleware\CookiesMiddleware;
use ForestCityLabs\Framework\Middleware\DefaultCacheMiddleware;
use ForestCityLabs\Framework\Middleware\FlashMiddleware;
use ForestCityLabs\Framework\Middleware\GeneratedByMiddleware;
use ForestCityLabs\Framework\Middleware\GraphQLMiddleware;
use ForestCityLabs\Framework\Middleware\HttpForbiddenMiddleware;
use ForestCityLabs\Framework\Middleware\HttpNotFoundMiddleware;
use ForestCityLabs\Framework\Middleware\HttpUnauthorizedMiddleware;
use ForestCityLabs\Framework\Middleware\RoutingMiddleware;
use ForestCityLabs\Framework\Middleware\SessionMiddleware;
use ForestCityLabs\Framework\Middleware\TrailingSlashMiddleware;
use ForestCityLabs\Framework\Middleware\WhoopsMiddleware;
use Psr\Container\ContainerInterface;
use Psr\EventDispatcher\EventDispatcherInterface;
use Psr\Log\LoggerInterface;

class KernelFactory
{
    public static function getPackages(): array
    {
        $packages = [
            __DIR__ . '/../config/packages/cache.php',
            __DIR__ . '/../config/packages/console.php',
            __DIR__ . '/../config/packages/dbal.php',
            __DIR__ . '/../config/packages/event.php',
            __DIR__ . '/../config/packages/graphql.php',
            __DIR__ . '/../config/packages/http.php',
            __DIR__ . '/../config/packages/logger.php',
            __DIR__ . '/../config/packages/migrations.php',
            __DIR__ . '/../config/packages/orm.php',
            __DIR__ . '/../config/packages/property_access.php',
            __DIR__ . '/../config/packages/router.php',
            __DIR__ . '/../config/packages/security.php',
            __DIR__ . '/../config/packages/session.php',
            __DIR__ . '/../config/packages/twig.php',
            __DIR__ . '/../config/packages/utility.php',
        ];

        if ((bool) ('dev' === getenv('ENVIRONMENT'))) {
            $packages[] = __DIR__ . '/../config/packages/development.php';
            $packages[] = __DIR__ . '/../config/packages/generator.php';
        }

        return $packages;
    }

    public static function createApplicationContainer(): ContainerInterface
    {
        // Build the application container.
        $builder = new ContainerBuilder();

        // Add services from packages.
        foreach (self::getPackages() as $package) {
            $builder->addDefinitions($package);
        }

        // Add service configuration and overrides.
        $builder->addDefinitions(__DIR__ . '/../config/services.php');

        // Write proxies to file and enable compilation.
        if (!(bool) ('dev' === getenv('ENVIRONMENT'))) {
            $builder->writeProxiesToFile(true, __DIR__ . '/../var/cache/proxies');
            $builder->enableCompilation(__DIR__ . '/../var/cache');
        }

        // Build the container.
        return $builder->build();
    }

    public static function createHttpKernel(): Kernel
    {
        // Create the application kernel and push middleware services.
        $container = self::createApplicationContainer();
        $kernel = new Kernel(
            $container,
            $container->get(EventDispatcherInterface::class),
            $container->get(LoggerInterface::class)
        );

        // Handle exceptions using whoops.
        if ($container->get('app.debug')) {
            $kernel->addMiddleware(WhoopsMiddleware::class);
        }

        // Provide default cache headers.
        $kernel->addMiddleware(DefaultCacheMiddleware::class);

        // Add generated by middleware.
        $kernel->addMiddleware(GeneratedByMiddleware::class);

        // Middleware for http exception handling.
        $kernel->addMiddleware(HttpUnauthorizedMiddleware::class);
        $kernel->addMiddleware(HttpForbiddenMiddleware::class);
        $kernel->addMiddleware(HttpNotFoundMiddleware::class);

        // Allowed hosts and CORS middleware.
        $kernel->addMiddleware(AllowedHostMiddleware::class);

        // Cookie and session middleware.
        $kernel->addMiddleware(CookiesMiddleware::class);
        $kernel->addMiddleware(SessionMiddleware::class);
        $kernel->addMiddleware(FlashMiddleware::class);

        // The main routing middlewares.
        $kernel->addMiddleware(TrailingSlashMiddleware::class);
        $kernel->addMiddleware(GraphQLMiddleware::class);
        $kernel->addMiddleware(RoutingMiddleware::class);

        // Return completed http kernel.
        return $kernel;
    }
}
